#!/usr/bin/env ruby

$: << File.expand_path('..', File.dirname(__FILE__))
$: << File.expand_path('../src', File.dirname(__FILE__))

require 'odba'
require 'util/oddbapp'
require 'etc/db_connection'

max = ODBA.storage.max_id

puts "#### Starting Stub-Check ####"
$stdout.flush

1.upto(max) { |id|

  if(dump = ODBA.storage.restore(id))
    obj = nil
    begin 
      obj = ODBA.marshaller.load(dump)
      needs_save = false
      types = []
      obj.odba_potentials.each { |name|
        if((stub = obj.instance_variable_get(name)) && stub.is_a?(ODBA::Stub))
          if(stub.odba_container.object_id != obj.object_id)
            stub.odba_container = obj
            types.push(:container)
          end
          if(stub.instance_variable_get('@receiver'))
            stub.odba_clear_receiver
            types.push(:receiver)
          end
          if(!stub.instance_variable_get('@odba_class'))
            receiver = ODBA.marshaller.load(ODBA.storage.restore(stub.odba_id)) rescue nil
            stub.instance_variable_set('@odba_class', receiver.class)
            types.push(:odba_class)
          end
        end
      }
      unless(types.empty?)
        puts "fixing stubs (#{types.uniq.join(', ')}) in #{obj.class}:#{id}"
        ODBA.storage.store(id, ODBA.marshaller.dump(obj), obj.odba_name, 
                           obj.odba_prefetch?, obj.class)
      end
    rescue Exception => e
      puts "Exception: #{e} while fixing #{obj.class}##{id}"
    end
  end

	print " " * 8
	print "\b" * 8
	print "#{sprintf('%7.3f', id.to_f/max.to_f*100.0)}%"
	print "\b" * 8
	$stdout.flush
}

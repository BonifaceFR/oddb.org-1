#!/usr/bin/env ruby
# AnalysisParse::PageHandler -- oddb.org -- 12.04.2006 -- sfrischknecht@ywesee.com

require 'parser'

module ODDB
	module AnalysisParse
		class PageHandler
			def analyze(page, pagenum)
				handler = Rpdf2txt::SimpleHandler.new
				page.text(handler)
				txt = handler.out
				next_pagehandler(txt)
			end
			def next_pagehandler(txt)
				self
			end
			def find_subchapters(pattern, txt)
				lines = []
				txt.each { |part|
					lines << ''
					lines.each { |line|
						line << ' ' << part.strip
						if(match = pattern.match(line))
							unless(match[1].strip == '')
								@index.store(match[2].to_i.next, match[1].strip)
								lines = []
							end
						end
					}
				}
				puts @index.inspect
			end
		end
		class IndexHandler < PageHandler
			attr_reader :index
			def initialize(index)
				@index = index
				@parser = ListParser.new
			end
			def analyze(page, pagenum)
				puts @index.inspect
				handler = Rpdf2txt::SimpleHandler.new
				page.text(handler)
				txt = handler.out
				case @index[pagenum]
				when /rechtsgrundlagen/i
					puts "RECHTSGRUNDLAGEN SIND DA"
				when /anhänge zur analysenliste/im
						puts "APPENDIX FOUND"
				when /genetik/i
					@parser.parse_page(txt, pagenum)
					puts @parser.class
				else
					self
				end
			end
		end
		class IndexFinder < PageHandler
			attr_reader :index
			def next_pagehandler(txt)
				@index ||= {}
				if(/^\s*inhalts.bersicht\s*vorbemerkungen/i.match(txt))
					find_subchapters(/^\s*\d.\s+(.*?)\.*\s*(\d*)/, txt)
					find_subchapters(/^\s*\d\.\s*([^\d]+?)\..+?(\d+)/, txt)
			#		self
			#	elsif(/^\s*systematische\s*auflistung\s*der\s*analysen\s*inkl.\s*anh.nge/i.match(txt))
					find_subchapters(/^\s*\d\.\s*kapitel\s*:\s*(.*?)\s*[\d\.]{2,7}\s*.*?\.*\s*(\d+)\s*/im, txt)
			#		if(/^\s*5\.\s*Kapitel:\s*anh.nge\s*zur\s*analysenliste/i.match(txt))
						find_subchapters(/^\s*5\.\d\s*anhang\s*[ABC]\s*(.*?)\s*\.*\s*(\d+)\s*$/, txt)
						find_subchapters(/^\s*5\.\d\s*anhang\s*[ABC]\s*(.*?)[\d\.]{5,7}\s*.*?\.*\s*(\d+)\s*$/im, txt)
			#		end
					self


				else
					if(@index.empty?)
						self
					else
						IndexHandler.new(@index)
					end
				end
			end
		end
	end
end
